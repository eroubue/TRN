<?xml version="1.0"?>
<TriggernometryExport PluginVersion="1.2.0.749">
  <ExportedFolder Id="bb4815cb-c9d3-4666-8b2f-337eda686795" Name="零师傅logs警察v1.6" Enabled="true">
    <Folders>
      <Folder Id="8ec70820-cb70-4494-951b-05441ca85f59" Name="默语宏触发" Enabled="true">
        <Folders />
        <Triggers>
          <Trigger Enabled="true" Name="默语any(fflogs)触发" Id="82159f35-2e71-47e9-bd2f-cd847dfd1989" RegularExpression="^.{14} ChatLog 00:0038::0&amp;LPal (?&lt;name&gt;.+?)\ (?&lt;server&gt;.+?)\ (?&lt;encounterId&gt;\w+)\ (?&lt;specName&gt;.+?)\ (?&lt;metric&gt;\w+)">
            <Actions>
              <Action OrderNumber="1" NamedCallbackName="Nag0mi_LogsPolice_any" NamedCallbackParam="${name} ${server} ${encounterId} ${specName} ${metric}" ActionType="NamedCallback" />
            </Actions>
          </Trigger>
          <Trigger Enabled="true" Name="默语Self(sumemo)触发" Id="706950a6-123c-4cca-aa23-d6680fa6e1d1" RegularExpression="^.{14} ChatLog 00:0038::0&amp;SPS (?&lt;encounterId&gt;\S+)">
            <Actions>
              <Action OrderNumber="1" NamedCallbackName="Nag0mi_SumemoPolice" NamedCallbackParam="Self ${encounterId}" ActionType="NamedCallback" />
            </Actions>
          </Trigger>
          <Trigger Enabled="true" Name="默语Party(sumemo)触发" Id="4e73334a-401d-4b74-805f-9cbc4750e546" RegularExpression="^.{14} ChatLog 00:0038::0&amp;SPP (?&lt;encounterId&gt;\w+)">
            <Actions>
              <Action OrderNumber="1" NamedCallbackName="Nag0mi_SumemoPolice" NamedCallbackParam="Party ${encounterId}" ActionType="NamedCallback" />
            </Actions>
          </Trigger>
          <Trigger Enabled="true" Name="默语any(sumemo)触发" Id="28714348-7260-4206-9d63-3ca4d9477a16" RegularExpression="^.{14} ChatLog 00:0038::0&amp;LPas (?&lt;name&gt;.+?)\ (?&lt;server&gt;.+?)\ (?&lt;encounterId&gt;\w+)">
            <Actions>
              <Action OrderNumber="1" NamedCallbackName="Nag0mi_SumemoPolice_any" NamedCallbackParam="${name} ${server} ${encounterId}" ActionType="NamedCallback" />
            </Actions>
          </Trigger>
          <Trigger Enabled="true" Name="默语Party(fflogs)触发" Id="fcedb8ab-307b-4591-94e4-e16021f88e65" RegularExpression="^.{14} ChatLog 00:0038::0&amp;LPP (?&lt;metric&gt;\S+)\ (?&lt;encounterId&gt;\w+)">
            <Actions>
              <Action OrderNumber="1" NamedCallbackName="Nag0mi_LogsPolice" NamedCallbackParam="Party ${metric} ${encounterId}" ActionType="NamedCallback" />
            </Actions>
          </Trigger>
          <Trigger Enabled="true" Name="默语Self(fflogs)触发" Id="0a646ae0-3c71-4303-9517-32a70c7d3b42" RegularExpression="^.{14} ChatLog 00:0038::0&amp;LPS (?&lt;metric&gt;\S+)\ (?&lt;encounterId&gt;\w+)(?:\ (?&lt;specName&gt;\w+))?">
            <Actions>
              <Action OrderNumber="1" NamedCallbackName="Nag0mi_LogsPolice" NamedCallbackParam="Self ${metric} ${encounterId} ${specName}" ActionType="NamedCallback" />
            </Actions>
          </Trigger>
        </Triggers>
      </Folder>
    </Folders>
    <Triggers>
      <Trigger Enabled="true" Name="使用说明7/18  v1.5" Id="889e01e4-8ced-4401-97ed-63ae16d73247" RegularExpression="">
        <Actions>
          <Action OrderNumber="1" ActionType="Placeholder" Description="作者:Nag0mi&#xD;&#xA;反馈连接:bilibili:https://space.bilibili.com/74131583&#xD;&#xA;  github:https://github.com/eroubue/AE3.0-Nag0miACR/issues" DescriptionOverride="True" />
          <Action OrderNumber="2" ActionType="Placeholder" Description="在fflogsapi触发器中填入你的v2api client_id和client_secret 。&#xD;&#xA;&#xD;&#xA;登录 FF Logs。&#xD;&#xA;进入client管理页面，点击创建client。&#xD;&#xA;输入client名称（任意）。client名称用于在列表视图中识别客户。授权站点用户时，客户名称将对其可见。&#xD;&#xA;输入所需的任何重定向 URI。（任意）&#xD;&#xA;单击“创建”。&#xD;&#xA;复制得到的client_id和client_secret" DescriptionOverride="True" />
          <Action OrderNumber="3" ActionType="Placeholder" Description="使用前先填api，再Crtl+M安全选项卡开启System.Net权限,若查询无反应再对fflogsapi触发器右键-测试-使用实时值" DescBgColor="PINK" DescTextColor="BLUE" DescriptionOverride="True" />
          <Action OrderNumber="4" ActionType="Placeholder" Description="metric可填dps/rdps/adps/ndps/cdps" DescriptionOverride="True" />
          <Action OrderNumber="5" ActionType="Placeholder" Description="职业名示例(暗黑骑士|黑骑|DK|Dark Knight|DRK)等均可识别,忽略大小写,留空时识别当前职业" DescriptionOverride="True" />
          <Action OrderNumber="6" ActionType="Placeholder" Description="副本ID既可填写数字ID，也可直接填写常用副本名（如“绝神兵”“UwU”“M5S”等）具体见下方支持缩写" DescriptionOverride="True" />
          <Action OrderNumber="7" ActionType="Placeholder" Description="{ &quot;UCoB&quot;, 1060 }, { &quot;绝巴哈&quot;, 1060 },{ &quot;巴哈&quot;, 1060 },{ &quot;巴哈姆特绝境战&quot;, 1060 },{ &quot;巴&quot;, 1060 },{ &quot;巴哈姆特&quot;, 1060 },&#xD;&#xA;        { &quot;UwU&quot;, 1061 }, { &quot;绝神兵&quot;, 1061 },{ &quot;神兵&quot;, 1061 },{ &quot;究极神兵绝境战&quot;, 1061 },{ &quot;兵&quot;, 1061 },{ &quot;究极神兵&quot;, 1061 },&#xD;&#xA;        { &quot;TEA&quot;, 1062 }, { &quot;绝亚&quot;, 1062 },{ &quot;亚历山大绝境战&quot;, 1062 },{ &quot;绝亚历山大&quot;, 1062 },{ &quot;亚&quot;, 1062 },{ &quot;亚历山大&quot;, 1062 },    &#xD;&#xA;        { &quot;DSR&quot;, 1065 }, { &quot;龙诗&quot;, 1065 },{ &quot;幻想龙诗绝境战&quot;, 1065 },{ &quot;绝龙诗&quot;, 1065 },{ &quot;龙&quot;, 1065 },{ &quot;幻想龙诗&quot;, 1065 },&#xD;&#xA;        { &quot;TOP&quot;, 1068 }, { &quot;绝欧&quot;, 1068 },{ &quot;欧米茄绝境验证战&quot;, 1068 },{ &quot;绝欧米茄&quot;, 1068 },{ &quot;欧&quot;, 1068 },{ &quot;绝O&quot;, 1068 },{ &quot;欧米茄&quot;, 1068 },&#xD;&#xA;        { &quot;FRU&quot;, 1079 }, { &quot;绝伊甸&quot;, 1079 },{ &quot;光暗未来绝境战&quot;, 1079 },{ &quot;绝ed&quot;, 1079 },{ &quot;伊甸&quot;, 1079 },{ &quot;光暗未来&quot;, 1079 },&#xD;&#xA;        { &quot;M5S&quot;, 97 }, { &quot;阿卡狄亚登天斗技场 中量级1&quot;, 97 }, { &quot;Dancing Green&quot;, 97 },{ &quot;热舞绿光&quot;, 97 },&#xD;&#xA;        { &quot;M6S&quot;, 98 }, { &quot;阿卡狄亚登天斗技场 中量级2&quot;, 98 }, { &quot;Sugar Riot&quot;, 98 },{ &quot;狂热糖潮&quot;, 98 },&#xD;&#xA;        { &quot;M7S&quot;, 99 }, { &quot;阿卡狄亚登天斗技场 中量级3&quot;, 99 }, { &quot;Brute Abombinator&quot;, 99 },{ &quot;野蛮恨心&quot;, 99 },&#xD;&#xA;        { &quot;M8S&quot;, 100 }, { &quot;阿卡狄亚登天斗技场 中量级4&quot;, 100 }, { &quot;Howling Blade&quot;, 100 },{ &quot;剑嚎&quot;, 100 },&#xD;&#xA;        { &quot;极泽莲尼娅&quot;, 1080 }, { &quot;Zelenia&quot;, 1080 },&#xD;&#xA;        { &quot;Cloud of Darkness&quot;, 2061 }, { &quot;黑暗之云&quot;, 2061 },&#xD;&#xA;        { &quot;Black Cat&quot;, 93 }, { &quot;Honey B. Lovely&quot;, 94 }, { &quot;Brute Bomber&quot;, 95 }, { &quot;Wicked Thunder&quot;, 96 },&#xD;&#xA;        { &quot;M1S&quot;, 93 }, { &quot;阿卡狄亚登天斗技场 轻量级1&quot;, 93 }, { &quot;黑猫&quot;, 93 },&#xD;&#xA;        { &quot;M2S&quot;, 94 }, { &quot;阿卡狄亚登天斗技场 轻量级2&quot;, 94 }, { &quot;蜂蜂小甜心&quot;, 94 },&#xD;&#xA;        { &quot;M3S&quot;, 95 }, { &quot;阿卡狄亚登天斗技场 轻量级3&quot;, 95 }, { &quot;野蛮爆弹狂人&quot;, 95 },&#xD;&#xA;        { &quot;M4S&quot;, 96 }, { &quot;阿卡狄亚登天斗技场 轻量级4&quot;, 96 }, { &quot;狡雷&quot;, 96 },&#xD;&#xA;        { &quot;M9S&quot;, 101 }, { &quot;阿卡狄亚登天斗技场 重量级5&quot;, 101 }, &#xD;&#xA;        { &quot;M10S&quot;, 102 }, { &quot;阿卡狄亚登天斗技场 重量级6&quot;, 102 }, &#xD;&#xA;        { &quot;M11S&quot;, 103 }, { &quot;阿卡狄亚登天斗技场 重量级7&quot;, 103 }, &#xD;&#xA;        { &quot;M12S&quot;, 104 }, { &quot;阿卡狄亚登天斗技场 重量级8&quot;, 104 }, " DescriptionOverride="True" />
          <Action OrderNumber="8" ActionType="Placeholder" Description="sumemo任意角色最远进度查询:角色名 服务器 副本ID " DescBgColor="Yellow" DescriptionOverride="True" />
          <Action OrderNumber="9" ActionType="Placeholder" Description="/e 0&amp;LPas 角色名 服务器 副本ID" DescriptionOverride="True" />
          <Action OrderNumber="10" NamedCallbackName="Nag0mi_SumemoProgress" NamedCallbackParam="[name] [server] [副本名或zoneid]" ActionType="NamedCallback" />
          <Action OrderNumber="11" ActionType="Placeholder" Description="fflogs任意角色查询:角色名 服务器 副本ID 职业名 metric" DescBgColor="Yellow" DescriptionOverride="True" />
          <Action OrderNumber="12" ActionType="Placeholder" Description="/e 0&amp;LPal 角色名 服务器 副本ID 职业名 metric" DescriptionOverride="True" />
          <Action OrderNumber="13" NamedCallbackName="Nag0mi_LogsPolice_any" NamedCallbackParam="角色名 服务器 副本ID 职业名 metric" ActionType="NamedCallback" />
          <Action OrderNumber="14" ActionType="Placeholder" Description="sumemo自身/小队查询:mode [zoneId]" DescBgColor="Yellow" DescriptionOverride="True" />
          <Action OrderNumber="15" ActionType="Placeholder" Description="/e 0&amp;SPS 副本ID" DescriptionOverride="True" />
          <Action OrderNumber="16" NamedCallbackName="Nag0mi_SumemoPolice" NamedCallbackParam="Self ${encounterId}" ActionType="NamedCallback" />
          <Action OrderNumber="17" ActionType="Placeholder" Description="/e 0&amp;SPP 副本ID" DescriptionOverride="True" />
          <Action OrderNumber="18" NamedCallbackName="Nag0mi_SumemoPolice" NamedCallbackParam="Party ${encounterId}" ActionType="NamedCallback" />
          <Action OrderNumber="19" ActionType="Placeholder" Description="fflogs自身/小队查询:mode [metric] (name) (server) (specName) [encounterId]&#xD;&#xA;（）内可省略 参数之间用空格连接" DescBgColor="Yellow" DescriptionOverride="True" />
          <Action OrderNumber="20" ActionType="Placeholder" Description="/e 0&amp;LPS metric 副本ID (职业名)" DescriptionOverride="True" />
          <Action OrderNumber="21" NamedCallbackName="Nag0mi_LogsPolice" NamedCallbackParam="Self [metric] [encounterId] (specName)" ActionType="NamedCallback" />
          <Action OrderNumber="22" ActionType="Placeholder" Description="/e 0&amp;LPP metric 副本id" DescriptionOverride="True" />
          <Action OrderNumber="23" NamedCallbackName="Nag0mi_LogsPolice" NamedCallbackParam="Party [metric] [encounterId]" ActionType="NamedCallback" />
          <Action OrderNumber="24" ActionType="Placeholder" Description=" 小队模式返回最高查询dps|med%|击杀数|排名最高百分比" DescriptionOverride="True" />
        </Actions>
      </Trigger>
      <Trigger Enabled="true" Name="logs查询api" Id="967506a5-078f-47b1-92fd-ef26201c30aa" RegularExpression="^.{15}\S+ 01:">
        <Actions>
          <Action OrderNumber="1" VariableOp="SetString" VariableName="FFLOGS_CLIENT_ID" ActionType="Variable" Description="右键编辑，在表达式里填入你的CLIENTID" DescBgColor="Yellow" DescriptionOverride="True" />
          <Action OrderNumber="2" VariableOp="SetString" VariableName="FFLOGS_CLIENT_SECRET" ActionType="Variable" Description="右键编辑，在表达式里填入你的CLIENTSECRET" DescBgColor="Yellow" DescriptionOverride="True" />
          <Action OrderNumber="3" ExecScriptExpression="using System;&#xD;&#xA;using System.Net.Http;&#xD;&#xA;using System.Net.Http.Headers;&#xD;&#xA;using System.Text;&#xD;&#xA;using System.Threading.Tasks;&#xD;&#xA;using System.Collections.Generic;&#xD;&#xA;using Triggernometry;&#xD;&#xA;using System.Linq;&#xD;&#xA;using Triggernometry.PluginBridges;&#xD;&#xA;// 注册具名回调&#xD;&#xA;RealPlugin.plug.UnregisterNamedCallback(&quot;Nag0mi_LogsPolice_any&quot;);&#xD;&#xA;RealPlugin.plug.RegisterNamedCallback(&#xD;&#xA;    &quot;Nag0mi_LogsPolice_any&quot;,&#xD;&#xA;    new Func&lt;object, string, Task&gt;(async (_, param) =&gt;&#xD;&#xA;    {&#xD;&#xA;        try&#xD;&#xA;        {&#xD;&#xA;            var arr = param.Split(' ');&#xD;&#xA;            if (arr.Length &lt; 5)&#xD;&#xA;            {&#xD;&#xA;                RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e 参数不足，格式为 角色名 服务器 副本ID 职业名 metric&quot;);&#xD;&#xA;                return;&#xD;&#xA;            }&#xD;&#xA;            string name = arr[0];&#xD;&#xA;            string server = arr[1];&#xD;&#xA;            string encounterIdStr = arr[2];&#xD;&#xA;            int encounterId = 0;&#xD;&#xA;            // 支持副本名转ID&#xD;&#xA;            if (!int.TryParse(encounterIdStr, out encounterId) || encounterId == 0)&#xD;&#xA;            {&#xD;&#xA;                if (FFLogsV2ApiHelper.EncounterNameToId != null &amp;&amp; FFLogsV2ApiHelper.EncounterNameToId.TryGetValue(encounterIdStr, out var mappedId))&#xD;&#xA;                {&#xD;&#xA;                    encounterId = mappedId;&#xD;&#xA;                }&#xD;&#xA;                else&#xD;&#xA;                {&#xD;&#xA;                    RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e [Nag0mi_LogsPolice_any] encounterId必须为数字或常用副本名&quot;);&#xD;&#xA;                    return;&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;            string specName = arr[3];&#xD;&#xA;            string metric = arr[4].ToLower(); // 保证小写&#xD;&#xA;            string result = await FFLogsV2ApiHelper.QueryDpsAsync(name, server, encounterId, specName, metric);&#xD;&#xA;            RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, $&quot;/e {result}&quot;);&#xD;&#xA;        }&#xD;&#xA;        catch (Exception ex)&#xD;&#xA;        {&#xD;&#xA;            RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, $&quot;/e 查询异常: {ex.Message}&quot;);&#xD;&#xA;        }&#xD;&#xA;    }),&#xD;&#xA;    null,&#xD;&#xA;    registrant: &quot;FFLogs V2 API&quot;&#xD;&#xA;);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// 合并个人与小队查询为Nag0mi_LogsPolice具名回调（参数可选，支持自动识别）&#xD;&#xA;RealPlugin.plug.UnregisterNamedCallback(&quot;Nag0mi_LogsPolice&quot;);&#xD;&#xA;RealPlugin.plug.RegisterNamedCallback(&#xD;&#xA;    &quot;Nag0mi_LogsPolice&quot;,&#xD;&#xA;    new Func&lt;object, string, Task&gt;(async (_, param) =&gt;&#xD;&#xA;    {&#xD;&#xA;        try&#xD;&#xA;        {&#xD;&#xA;            var arr = (param ?? &quot;&quot;).Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);&#xD;&#xA;            if (arr.Length &lt; 1)&#xD;&#xA;            {&#xD;&#xA;                RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e 参数不足，格式为 mode [metric] [name] [server] [specName] [encounterId]&quot;);&#xD;&#xA;                return;&#xD;&#xA;            }&#xD;&#xA;            string mode = arr[0].Trim().ToLower();&#xD;&#xA;            string metric = arr.Length &gt; 1 &amp;&amp; !string.IsNullOrWhiteSpace(arr[1]) ? arr[1].Trim().ToLower() : &quot;rdps&quot;;&#xD;&#xA;            if (mode == &quot;self&quot;)&#xD;&#xA;            {&#xD;&#xA;                string name = &quot;&quot;, server = &quot;&quot;, specName = &quot;&quot;, encounterIdStr = &quot;&quot;;&#xD;&#xA;                int encounterId = 0;&#xD;&#xA;&#xD;&#xA;                // self metric encounterId specName&#xD;&#xA;                if (arr.Length &gt;= 3)&#xD;&#xA;                {&#xD;&#xA;                    encounterIdStr = arr[2];&#xD;&#xA;                    specName = arr.Length &gt;= 4 ? arr[3] : &quot;&quot;;&#xD;&#xA;                    // 新增：支持副本名转ID&#xD;&#xA;                    if (!int.TryParse(encounterIdStr, out encounterId) || encounterId == 0)&#xD;&#xA;                    {&#xD;&#xA;                        // 尝试副本名转ID&#xD;&#xA;                        if (FFLogsV2ApiHelper.EncounterNameToId != null &amp;&amp; FFLogsV2ApiHelper.EncounterNameToId.TryGetValue(encounterIdStr, out var mappedId))&#xD;&#xA;                        {&#xD;&#xA;                            encounterId = mappedId;&#xD;&#xA;                        }&#xD;&#xA;                        else&#xD;&#xA;                        {&#xD;&#xA;                            RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e [Nag0mi_LogsPolice] encounterId不能为空且必须为数字或常用副本名&quot;);&#xD;&#xA;                            return;&#xD;&#xA;                        }&#xD;&#xA;                    }&#xD;&#xA;                }&#xD;&#xA;                else&#xD;&#xA;                {&#xD;&#xA;                    RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e [Nag0mi_LogsPolice] 参数不足，格式为 self metric encounterId [specName]&quot;);&#xD;&#xA;                    return;&#xD;&#xA;                }&#xD;&#xA;&#xD;&#xA;                // 自动识别name和server&#xD;&#xA;                try&#xD;&#xA;                {&#xD;&#xA;                    var me = Triggernometry.FFXIV.Entity.GetMyself();&#xD;&#xA;                    name = me?.Name ?? &quot;&quot;;&#xD;&#xA;                    int? worldId = me?.WorldID;&#xD;&#xA;                    if (worldId != null &amp;&amp; FFLogsV2ApiHelper.WorldIdToName.TryGetValue(worldId.Value, out var cnName))&#xD;&#xA;                        server = cnName;&#xD;&#xA;                }&#xD;&#xA;                catch { }&#xD;&#xA;                if (string.IsNullOrWhiteSpace(name) || string.IsNullOrWhiteSpace(server))&#xD;&#xA;                {&#xD;&#xA;                    RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e [Nag0mi_LogsPolice] 未能自动识别角色名或服务器&quot;);&#xD;&#xA;                    return;&#xD;&#xA;                }&#xD;&#xA;&#xD;&#xA;                // specName可为空，自动识别&#xD;&#xA;                if (string.IsNullOrWhiteSpace(specName))&#xD;&#xA;                {&#xD;&#xA;                    try&#xD;&#xA;                    {&#xD;&#xA;                        var me = Triggernometry.FFXIV.Entity.GetMyself();&#xD;&#xA;                        specName = me?.Job.NameEN ?? &quot;&quot;;&#xD;&#xA;                    }&#xD;&#xA;                    catch { }&#xD;&#xA;                }&#xD;&#xA;&#xD;&#xA;                try&#xD;&#xA;                {&#xD;&#xA;                    string result = await FFLogsV2ApiHelper.QueryDpsAsync(name, server, encounterId, specName, metric);&#xD;&#xA;                    RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, $&quot;/e {result}&quot;);&#xD;&#xA;                }&#xD;&#xA;                catch (Exception ex)&#xD;&#xA;                {&#xD;&#xA;                    RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, $&quot;/e [Nag0mi_LogsPolice] {name} 查询异常: {ex.Message}&quot;);&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;            else if (mode == &quot;party&quot;)&#xD;&#xA;            {&#xD;&#xA;                int encounterId = 0;&#xD;&#xA;                if (arr.Length == 3 &amp;&amp; int.TryParse(arr[2], out encounterId))&#xD;&#xA;                {&#xD;&#xA;                    // party metric encounterId&#xD;&#xA;                }&#xD;&#xA;                else if (arr.Length == 2)&#xD;&#xA;                {&#xD;&#xA;                    // party metric&#xD;&#xA;                    // encounterId为0，直接返回空&#xD;&#xA;                    return;&#xD;&#xA;                }&#xD;&#xA;                else if (arr.Length &gt; 3)&#xD;&#xA;                {&#xD;&#xA;                    string encounterIdStr = arr[2];&#xD;&#xA;                    if (!string.IsNullOrWhiteSpace(encounterIdStr))&#xD;&#xA;                        int.TryParse(encounterIdStr, out encounterId);&#xD;&#xA;                }&#xD;&#xA;                // 获取小队成员列表&#xD;&#xA;                var party = Triggernometry.FFXIV.Entity.GetEntities().Where(e =&gt; e.InParty).ToList();&#xD;&#xA;                if (party == null || party.Count == 0) {&#xD;&#xA;                    RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e [Nag0mi_LogsPolice] 未获取到小队成员&quot;);&#xD;&#xA;                    return;&#xD;&#xA;                }&#xD;&#xA;                foreach (var member in party)&#xD;&#xA;                {&#xD;&#xA;                    string name = member.Name;&#xD;&#xA;                    int? worldId = member.WorldID;&#xD;&#xA;                    string server = &quot;&quot;;&#xD;&#xA;                    if (worldId != null &amp;&amp; FFLogsV2ApiHelper.WorldIdToName.TryGetValue(worldId.Value, out var cnName))&#xD;&#xA;                        server = cnName;&#xD;&#xA;                    else&#xD;&#xA;                    {&#xD;&#xA;                        RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, $&quot;/e [Nag0mi_LogsPolice] 队员{ name } WorldID { worldId } 未找到对应服务器名，已跳过&quot;);&#xD;&#xA;                        continue;&#xD;&#xA;                    }&#xD;&#xA;                    try {&#xD;&#xA;                        string json = await FFLogsV2ApiHelper.QueryDpsRawAsync(name, server, encounterId, &quot;&quot;, metric); // specName始终传空&#xD;&#xA;                        // 解析bestAmount&#xD;&#xA;                        double best = 0, medPct = 0, pct = 0;&#xD;&#xA;                        int kills = 0;&#xD;&#xA;                        int bestStart = json.IndexOf(&quot;\&quot;bestAmount\&quot;:&quot;);&#xD;&#xA;                        if (bestStart != -1) {&#xD;&#xA;                            bestStart += 13;&#xD;&#xA;                            int bestEnd = json.IndexOf(&quot;,&quot;, bestStart);&#xD;&#xA;                            if (bestEnd == -1) bestEnd = json.IndexOf(&quot;}&quot;, bestStart);&#xD;&#xA;                            string bestStr = json.Substring(bestStart, bestEnd - bestStart).Trim();&#xD;&#xA;                            double.TryParse(bestStr, out best);&#xD;&#xA;                        }&#xD;&#xA;                        int medStart = json.IndexOf(&quot;\&quot;medianPerformance\&quot;:&quot;);&#xD;&#xA;                        if (medStart != -1) {&#xD;&#xA;                            medStart += 20;&#xD;&#xA;                            int medEnd = json.IndexOf(&quot;,&quot;, medStart);&#xD;&#xA;                            if (medEnd == -1) medEnd = json.IndexOf(&quot;}&quot;, medStart);&#xD;&#xA;                            string medStr = json.Substring(medStart, medEnd - medStart).Trim();&#xD;&#xA;                            double.TryParse(medStr, out medPct);&#xD;&#xA;                        }&#xD;&#xA;                        int killsStart = json.IndexOf(&quot;\&quot;totalKills\&quot;:&quot;);&#xD;&#xA;                        if (killsStart != -1) {&#xD;&#xA;                            killsStart += 12;&#xD;&#xA;                            while (killsStart &lt; json.Length &amp;&amp; (json[killsStart] == ':' || json[killsStart] == ' ')) killsStart++;&#xD;&#xA;                            int killsEnd = json.IndexOf(&quot;,&quot;, killsStart);&#xD;&#xA;                            if (killsEnd == -1) killsEnd = json.IndexOf(&quot;}&quot;, killsStart);&#xD;&#xA;                            string killsStr = json.Substring(killsStart, killsEnd - killsStart).Trim();&#xD;&#xA;                            int.TryParse(killsStr, out kills);&#xD;&#xA;                        }&#xD;&#xA;                        int pctStart = json.IndexOf(&quot;\&quot;rankPercent\&quot;:&quot;);&#xD;&#xA;                        if (pctStart != -1) {&#xD;&#xA;                            pctStart += 14;&#xD;&#xA;                            int pctEnd = json.IndexOf(&quot;,&quot;, pctStart);&#xD;&#xA;                            if (pctEnd == -1) pctEnd = json.IndexOf(&quot;}&quot;, pctStart);&#xD;&#xA;                            string pctStr = json.Substring(pctStart, pctEnd - pctStart).Trim();&#xD;&#xA;                            double.TryParse(pctStr, out pct);&#xD;&#xA;                        }&#xD;&#xA;                        if (kills == 0)&#xD;&#xA;                        {&#xD;&#xA;                            RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, $&quot;/e {name}({server}): 未过本&quot;);&#xD;&#xA;                        }&#xD;&#xA;                        else&#xD;&#xA;                        {&#xD;&#xA;                            RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, $&quot;/e {name}({server}): 最高dps:{(int)Math.Round(best)}，med%:{(int)Math.Round(medPct)}，通关数:{kills}，best%:{(int)Math.Round(pct)}&quot;);&#xD;&#xA;                        }&#xD;&#xA;                    } catch (Exception ex) {&#xD;&#xA;                        RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, $&quot;/e [Nag0mi_LogsPolice] {name} 查询异常: {ex.Message}&quot;);&#xD;&#xA;                    }&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;            else&#xD;&#xA;            {&#xD;&#xA;                RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e mode参数必须为self或party&quot;);&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        catch (Exception ex)&#xD;&#xA;        {&#xD;&#xA;            RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, $&quot;/e Nag0mi_LogsPolice异常: {ex.Message}&quot;);&#xD;&#xA;        }&#xD;&#xA;    }),&#xD;&#xA;    null,&#xD;&#xA;    registrant: &quot;FFLogs V2 API&quot;&#xD;&#xA;);&#xD;&#xA;RealPlugin.plug.UnregisterNamedCallback(&quot;Nag0mi_SumemoPolice&quot;);&#xD;&#xA;RealPlugin.plug.RegisterNamedCallback(&#xD;&#xA;    &quot;Nag0mi_SumemoPolice&quot;,&#xD;&#xA;    new Func&lt;object, string, Task&gt;(async (_, param) =&gt;&#xD;&#xA;    {&#xD;&#xA;        try&#xD;&#xA;        {&#xD;&#xA;            var arr = (param ?? &quot;&quot;).Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);&#xD;&#xA;            if (arr.Length &lt; 1)&#xD;&#xA;            {&#xD;&#xA;                RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e 参数不足，格式为 [mode] zoneid&quot;);&#xD;&#xA;                return;&#xD;&#xA;            }&#xD;&#xA;            string mode = &quot;party&quot;;&#xD;&#xA;            string zoneidInput = null;&#xD;&#xA;            if (arr.Length == 1)&#xD;&#xA;            {&#xD;&#xA;                zoneidInput = arr[0];&#xD;&#xA;            }&#xD;&#xA;            else&#xD;&#xA;            {&#xD;&#xA;                mode = arr[0].Trim().ToLower();&#xD;&#xA;                zoneidInput = arr[1];&#xD;&#xA;            }&#xD;&#xA;            // 支持简称/中文名/数字&#xD;&#xA;            int mapId = 0;&#xD;&#xA;            if (FFLogsV2ApiHelper.EncounterToMapId.TryGetValue(zoneidInput, out var foundMapId))&#xD;&#xA;                mapId = foundMapId;&#xD;&#xA;            else if (int.TryParse(zoneidInput, out var id))&#xD;&#xA;                mapId = id;&#xD;&#xA;            else&#xD;&#xA;            {&#xD;&#xA;                RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e [Nag0mi_SumemoPolice] 副本ID必须为数字、简称或副本名&quot;);&#xD;&#xA;                return;&#xD;&#xA;            }&#xD;&#xA;            if (mapId == 0)&#xD;&#xA;            {&#xD;&#xA;                RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e [Nag0mi_SumemoPolice] 未找到副本对应的地图ID&quot;);&#xD;&#xA;                return;&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            if (mode == &quot;self&quot;)&#xD;&#xA;            {&#xD;&#xA;                // 自动识别自己&#xD;&#xA;                string name = &quot;&quot;, server = &quot;&quot;;&#xD;&#xA;                try&#xD;&#xA;                {&#xD;&#xA;                    var me = Triggernometry.FFXIV.Entity.GetMyself();&#xD;&#xA;                    name = me?.Name ?? &quot;&quot;;&#xD;&#xA;                    int? worldId = me?.WorldID;&#xD;&#xA;                    if (worldId != null &amp;&amp; FFLogsV2ApiHelper.WorldIdToName.TryGetValue(worldId.Value, out var cnName))&#xD;&#xA;                        server = cnName;&#xD;&#xA;                }&#xD;&#xA;                catch { }&#xD;&#xA;                if (string.IsNullOrWhiteSpace(name) || string.IsNullOrWhiteSpace(server))&#xD;&#xA;                {&#xD;&#xA;                    RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e [Nag0mi_SumemoPolice] 未能自动识别角色名或服务器&quot;);&#xD;&#xA;                    return;&#xD;&#xA;                }&#xD;&#xA;                try&#xD;&#xA;                {&#xD;&#xA;                    string result = await FFLogsV2ApiHelper.QuerySumemoProgressAsync(name, server, zoneidInput);&#xD;&#xA;                    RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, $&quot;/e {result}&quot;);&#xD;&#xA;                }&#xD;&#xA;                catch (Exception ex)&#xD;&#xA;                {&#xD;&#xA;                    RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, $&quot;/e [Nag0mi_SumemoPolice] {name} 查询异常: {ex.Message}&quot;);&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;            else // party&#xD;&#xA;            {&#xD;&#xA;                // 获取小队成员&#xD;&#xA;                var party = Triggernometry.FFXIV.Entity.GetEntities().Where(e =&gt; e.InParty).ToList();&#xD;&#xA;                if (party == null || party.Count == 0)&#xD;&#xA;                {&#xD;&#xA;                    RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e [Nag0mi_SumemoPolice] 未获取到小队成员&quot;);&#xD;&#xA;                    return;&#xD;&#xA;                }&#xD;&#xA;                foreach (var member in party)&#xD;&#xA;                {&#xD;&#xA;                    string name = member.Name;&#xD;&#xA;                    int? worldId = member.WorldID;&#xD;&#xA;                    string server = &quot;&quot;;&#xD;&#xA;                    if (worldId != null &amp;&amp; FFLogsV2ApiHelper.WorldIdToName.TryGetValue(worldId.Value, out var cnName))&#xD;&#xA;                        server = cnName;&#xD;&#xA;                    else&#xD;&#xA;                    {&#xD;&#xA;                        RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, $&quot;/e [Nag0mi_SumemoPolice] 队员{ name } WorldID { worldId } 未找到对应服务器名，已跳过&quot;);&#xD;&#xA;                        continue;&#xD;&#xA;                    }&#xD;&#xA;                    try&#xD;&#xA;                    {&#xD;&#xA;                        string result = await FFLogsV2ApiHelper.QuerySumemoProgressAsync(name, server, zoneidInput);&#xD;&#xA;                        RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, $&quot;/e {result}&quot;);&#xD;&#xA;                    }&#xD;&#xA;                    catch (Exception ex)&#xD;&#xA;                    {&#xD;&#xA;                        RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, $&quot;/e [Nag0mi_SumemoPolice] {name} 查询异常: {ex.Message}&quot;);&#xD;&#xA;                    }&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        catch (Exception ex)&#xD;&#xA;        {&#xD;&#xA;            RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, $&quot;/e [Nag0mi_SumemoPolice] 异常: {ex.Message}&quot;);&#xD;&#xA;        }&#xD;&#xA;    }),&#xD;&#xA;    null,&#xD;&#xA;    registrant: &quot;SumemoPolice&quot;&#xD;&#xA;);&#xD;&#xA;RealPlugin.plug.UnregisterNamedCallback(&quot;Nag0mi_SumemoPolice_any&quot;);&#xD;&#xA;RealPlugin.plug.RegisterNamedCallback(&#xD;&#xA;    &quot;Nag0mi_SumemoPolice_any&quot;,&#xD;&#xA;    new Func&lt;object, string, Task&gt;(async (_, param) =&gt;&#xD;&#xA;    {&#xD;&#xA;        try&#xD;&#xA;        {&#xD;&#xA;            var arr = (param ?? &quot;&quot;).Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);&#xD;&#xA;            if (arr.Length &lt; 3)&#xD;&#xA;            {&#xD;&#xA;                RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e 参数不足，格式为 角色名 服务器名 副本ID&quot;);&#xD;&#xA;                return;&#xD;&#xA;            }&#xD;&#xA;            string name = arr[0];&#xD;&#xA;            string server = arr[1];&#xD;&#xA;            string encounterIdStr = arr[2];&#xD;&#xA;            int mapId = 0;&#xD;&#xA;            if (FFLogsV2ApiHelper.EncounterToMapId.TryGetValue(encounterIdStr, out var foundMapId))&#xD;&#xA;            {&#xD;&#xA;                mapId = foundMapId;&#xD;&#xA;            }&#xD;&#xA;            else if (int.TryParse(encounterIdStr, out var id))&#xD;&#xA;            {&#xD;&#xA;                // 允许直接输入地图ID&#xD;&#xA;                mapId = id;&#xD;&#xA;            }&#xD;&#xA;            else&#xD;&#xA;            {&#xD;&#xA;                RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e [Nag0mi_SumemoPolice_any] 副本ID必须为数字、简称或副本名&quot;);&#xD;&#xA;                return;&#xD;&#xA;            }&#xD;&#xA;            if (mapId == 0)&#xD;&#xA;            {&#xD;&#xA;                RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e [Nag0mi_SumemoPolice_any] 未找到副本对应的地图ID&quot;);&#xD;&#xA;                return;&#xD;&#xA;            }&#xD;&#xA;            string result = await FFLogsV2ApiHelper.QuerySumemoProgressAsync(name, server, encounterIdStr);&#xD;&#xA;            RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, $&quot;/e {result}&quot;);&#xD;&#xA;        }&#xD;&#xA;        catch (Exception ex)&#xD;&#xA;        {&#xD;&#xA;            RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, $&quot;/e 查询异常: {ex.Message}&quot;);&#xD;&#xA;        }&#xD;&#xA;    }),&#xD;&#xA;    null,&#xD;&#xA;    registrant: &quot;SumemoPolice&quot;&#xD;&#xA;);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;public static class FFLogsV2ApiHelper&#xD;&#xA;{&#xD;&#xA;    public static readonly Dictionary&lt;int, string&gt; WorldIdToName = new Dictionary&lt;int, string&gt;&#xD;&#xA;    {&#xD;&#xA;        { 1201, &quot;红茶川&quot; },&#xD;&#xA;        { 1200, &quot;亚马乌罗提&quot; },&#xD;&#xA;        { 1192, &quot;水晶塔&quot; },&#xD;&#xA;        { 1186, &quot;伊修加德&quot; },&#xD;&#xA;        { 1183, &quot;银泪湖&quot; },&#xD;&#xA;        { 1180, &quot;太阳神岸&quot; },&#xD;&#xA;        { 1179, &quot;琥珀原&quot; },&#xD;&#xA;        { 1178, &quot;柔风海湾&quot; },&#xD;&#xA;        { 1177, &quot;潮风亭&quot; },&#xD;&#xA;        { 1176, &quot;梦羽宝境&quot; },&#xD;&#xA;        { 1175, &quot;晨曦王座&quot; },&#xD;&#xA;        { 1174, &quot;沃仙曦染&quot; },&#xD;&#xA;        { 1173, &quot;宇宙和音&quot; },&#xD;&#xA;        { 1172, &quot;白银乡&quot; },&#xD;&#xA;        { 1171, &quot;神拳痕&quot; },&#xD;&#xA;        { 1170, &quot;延夏&quot; },&#xD;&#xA;        { 1169, &quot;静语庄园&quot; },&#xD;&#xA;        { 1168, &quot;拉诺西亚&quot; },&#xD;&#xA;        { 1167, &quot;红玉海&quot; },&#xD;&#xA;        { 1166, &quot;龙巢神殿&quot; },&#xD;&#xA;        { 1121, &quot;拂晓之间&quot; },&#xD;&#xA;        { 1116, &quot;萌芽池&quot; },&#xD;&#xA;        { 1113, &quot;旅人栈桥&quot; },&#xD;&#xA;        { 1084, &quot;静语庄园&quot; },&#xD;&#xA;        { 1082, &quot;神意之地&quot; },&#xD;&#xA;        { 1062, &quot;白金幻象&quot; },&#xD;&#xA;        { 1061, &quot;白金幻象&quot; },&#xD;&#xA;        { 1045, &quot;摩杜纳&quot; },&#xD;&#xA;        { 1044, &quot;幻影群岛&quot; },&#xD;&#xA;        { 1043, &quot;紫水栈桥&quot; },&#xD;&#xA;        { 1042, &quot;拉诺西亚&quot; },&#xD;&#xA;        // ...如有遗漏请补全...&#xD;&#xA;    };&#xD;&#xA;&#xD;&#xA;    // 职业英文名映射表（带空格→FFLogs格式）&#xD;&#xA;    static readonly Dictionary&lt;string, string&gt; SpecNameMap =&#xD;&#xA;        new Dictionary&lt;string, string&gt;(StringComparer.OrdinalIgnoreCase)&#xD;&#xA;        {&#xD;&#xA;            { &quot;Dark Knight&quot;, &quot;DarkKnight&quot; },&#xD;&#xA;            { &quot;DK&quot;, &quot;DarkKnight&quot; },&#xD;&#xA;            { &quot;DRK&quot;, &quot;DarkKnight&quot; },&#xD;&#xA;            { &quot;暗黑骑士&quot;, &quot;DarkKnight&quot; },&#xD;&#xA;            { &quot;黑暗骑士&quot;, &quot;DarkKnight&quot; },&#xD;&#xA;            { &quot;暗骑&quot;, &quot;DarkKnight&quot; },&#xD;&#xA;            { &quot;黑骑&quot;, &quot;DarkKnight&quot; },&#xD;&#xA;            { &quot;黑骑士&quot;, &quot;DarkKnight&quot; },&#xD;&#xA;            { &quot;暗骑士&quot;, &quot;DarkKnight&quot; },&#xD;&#xA;            { &quot;枪刃&quot;, &quot;Gunbreaker&quot; },&#xD;&#xA;            { &quot;枪&quot;, &quot;Gunbreaker&quot; },&#xD;&#xA;            { &quot;GNB&quot;, &quot;Gunbreaker&quot; },&#xD;&#xA;            { &quot;绝枪战士&quot;, &quot;Gunbreaker&quot; },&#xD;&#xA;            { &quot;绝枪&quot;, &quot;Gunbreaker&quot; },&#xD;&#xA;            { &quot;骑士&quot;, &quot;Paladin&quot; },&#xD;&#xA;            { &quot;PLD&quot;, &quot;Paladin&quot; },&#xD;&#xA;            { &quot;骑&quot;, &quot;Paladin&quot; },&#xD;&#xA;            { &quot;白骑&quot;, &quot;Paladin&quot; },&#xD;&#xA;            { &quot;白骑士&quot;, &quot;Paladin&quot; },&#xD;&#xA;            { &quot;战士&quot;, &quot;Warrior&quot; },&#xD;&#xA;            { &quot;战&quot;, &quot;Warrior&quot; },&#xD;&#xA;            { &quot;WAR&quot;, &quot;Warrior&quot; },&#xD;&#xA;            { &quot;White Mage&quot;, &quot;WhiteMage&quot; },&#xD;&#xA;            { &quot;WHM&quot;, &quot;WhiteMage&quot; },&#xD;&#xA;            { &quot;白魔&quot;, &quot;WhiteMage&quot; },&#xD;&#xA;            { &quot;白魔法师&quot;, &quot;WhiteMage&quot; },&#xD;&#xA;            { &quot;白&quot;, &quot;WhiteMage&quot; },&#xD;&#xA;            { &quot;学者&quot;, &quot;Scholar&quot; },&#xD;&#xA;            { &quot;学&quot;, &quot;Scholar&quot; },&#xD;&#xA;            { &quot;SCH&quot;, &quot;Scholar&quot; },&#xD;&#xA;            { &quot;占星术师&quot;, &quot;Astrologian&quot; },&#xD;&#xA;            { &quot;AST&quot;, &quot;Astrologian&quot; },&#xD;&#xA;            { &quot;占星&quot;, &quot;Astrologian&quot; },&#xD;&#xA;            { &quot;占&quot;, &quot;Astrologian&quot; },&#xD;&#xA;            { &quot;贤者&quot;, &quot;Sage&quot; },&#xD;&#xA;            { &quot;SGE&quot;, &quot;Sage&quot; },&#xD;&#xA;            { &quot;贤&quot;, &quot;Sage&quot; },&#xD;&#xA;            { &quot;Black Mage&quot;, &quot;BlackMage&quot; },&#xD;&#xA;            { &quot;BLM&quot;, &quot;BlackMage&quot; },&#xD;&#xA;            { &quot;黑魔&quot;, &quot;BlackMage&quot; },&#xD;&#xA;            { &quot;黑魔法师&quot;, &quot;BlackMage&quot; },&#xD;&#xA;            { &quot;黑&quot;, &quot;BlackMage&quot; },&#xD;&#xA;            { &quot;召唤&quot;, &quot;Summoner&quot; },&#xD;&#xA;            { &quot;SMN&quot;, &quot;Summoner&quot; },&#xD;&#xA;            { &quot;召唤师&quot;, &quot;Summoner&quot; },&#xD;&#xA;            { &quot;召&quot;, &quot;Summoner&quot; },&#xD;&#xA;            { &quot;Red Mage&quot;, &quot;RedMage&quot; },&#xD;&#xA;            { &quot;RDM&quot;, &quot;RedMage&quot; },&#xD;&#xA;            { &quot;红魔&quot;, &quot;RedMage&quot; },&#xD;&#xA;            { &quot;红魔法师&quot;, &quot;RedMage&quot; },&#xD;&#xA;            { &quot;红&quot;, &quot;RedMage&quot; },&#xD;&#xA;            { &quot;赤&quot;, &quot;RedMage&quot; },&#xD;&#xA;            { &quot;赤魔法师&quot;, &quot;RedMage&quot; },&#xD;&#xA;            { &quot;赤魔&quot;, &quot;RedMage&quot; },&#xD;&#xA;            { &quot;吟游诗人&quot;, &quot;Bard&quot; },&#xD;&#xA;            { &quot;BRD&quot;, &quot;Bard&quot; },&#xD;&#xA;            { &quot;诗人&quot;, &quot;Bard&quot; },&#xD;&#xA;            { &quot;诗&quot;, &quot;Bard&quot; },&#xD;&#xA;            { &quot;DNC&quot;, &quot;Dancer&quot; },&#xD;&#xA;            { &quot;舞者&quot;, &quot;Dancer&quot; },&#xD;&#xA;            { &quot;舞&quot;, &quot;Dancer&quot; },&#xD;&#xA;            { &quot;机工&quot;, &quot;Machinist&quot; },&#xD;&#xA;            { &quot;MCH&quot;, &quot;Machinist&quot; },&#xD;&#xA;            { &quot;机工士&quot;, &quot;Machinist&quot; },&#xD;&#xA;            { &quot;机&quot;, &quot;Machinist&quot; },&#xD;&#xA;            { &quot;龙骑士&quot;, &quot;Dragoon&quot; },&#xD;&#xA;            { &quot;DRG&quot;, &quot;Dragoon&quot; },&#xD;&#xA;            { &quot;龙&quot;, &quot;Dragoon&quot; },&#xD;&#xA;            { &quot;龙骑&quot;, &quot;Dragoon&quot; },&#xD;&#xA;            { &quot;武僧&quot;, &quot;Monk&quot; },&#xD;&#xA;            { &quot;武&quot;, &quot;Monk&quot; },&#xD;&#xA;            { &quot;MNK&quot;, &quot;Monk&quot; },&#xD;&#xA;            { &quot;僧&quot;, &quot;Monk&quot; },&#xD;&#xA;            { &quot;忍&quot;, &quot;Ninja&quot; },&#xD;&#xA;            { &quot;NIN&quot;, &quot;Ninja&quot; },&#xD;&#xA;            { &quot;忍者&quot;, &quot;Ninja&quot; },&#xD;&#xA;            { &quot;镰刀&quot;, &quot;Reaper&quot; },&#xD;&#xA;            { &quot;RPR&quot;, &quot;Reaper&quot; },&#xD;&#xA;            { &quot;镰&quot;, &quot;Reaper&quot; },&#xD;&#xA;            { &quot;钐镰客&quot;, &quot;Reaper&quot; },&#xD;&#xA;            { &quot;武士&quot;, &quot;Samurai&quot; },&#xD;&#xA;            { &quot;SAM&quot;, &quot;Samurai&quot; },&#xD;&#xA;            { &quot;侍&quot;, &quot;Samurai&quot; },&#xD;&#xA;            { &quot;盘&quot;, &quot;Samurai&quot; },&#xD;&#xA;            { &quot;盘子&quot;, &quot;Samurai&quot; },&#xD;&#xA;            { &quot;Blue Mage&quot;, &quot;BlueMage&quot; },&#xD;&#xA;            { &quot;青魔&quot;, &quot;BlueMage&quot; },&#xD;&#xA;            { &quot;BLU&quot;, &quot;BlueMage&quot; },&#xD;&#xA;            { &quot;青魔法师&quot;, &quot;BlueMage&quot; },&#xD;&#xA;            { &quot;青&quot;, &quot;BlueMage&quot; },&#xD;&#xA;            { &quot;Rogue&quot;, &quot;Ninja&quot; },&#xD;&#xA;            { &quot;Gladiator&quot;, &quot;Paladin&quot; },&#xD;&#xA;            { &quot;Conjurer&quot;, &quot;WhiteMage&quot; },&#xD;&#xA;            { &quot;幻术师&quot;, &quot;WhiteMage&quot; },&#xD;&#xA;            { &quot;Arcanist&quot;, &quot;Summoner&quot; },&#xD;&#xA;            { &quot;Marauder&quot;, &quot;Warrior&quot; },&#xD;&#xA;            { &quot;Lancer&quot;, &quot;Dragoon&quot; },&#xD;&#xA;            { &quot;Pugilist&quot;, &quot;Monk&quot; },&#xD;&#xA;            { &quot;Thaumaturge&quot;, &quot;BlackMage&quot; },&#xD;&#xA;            { &quot;Archer&quot;, &quot;Bard&quot; },&#xD;&#xA;            { &quot;画家&quot;, &quot;Pictomancer&quot; },&#xD;&#xA;            { &quot;PCT&quot;, &quot;Pictomancer&quot; },&#xD;&#xA;            { &quot;画&quot;, &quot;Pictomancer&quot; },&#xD;&#xA;            { &quot;绘灵法师&quot;, &quot;Pictomancer&quot; },&#xD;&#xA;            { &quot;VPR&quot;, &quot;Viper&quot; },&#xD;&#xA;            { &quot;蛇&quot;, &quot;Viper&quot; },&#xD;&#xA;            { &quot;蝰蛇&quot;, &quot;Viper&quot; },&#xD;&#xA;            { &quot;蝰蛇剑士&quot;, &quot;Viper&quot; },&#xD;&#xA;            // ...如有其它职业请补全...&#xD;&#xA;        };&#xD;&#xA;&#xD;&#xA;    // 职业英文→中文全称映射&#xD;&#xA;    public static readonly Dictionary&lt;string, string&gt; SpecNameEnToZh =&#xD;&#xA;        new Dictionary&lt;string, string&gt;(StringComparer.OrdinalIgnoreCase)&#xD;&#xA;        {&#xD;&#xA;            { &quot;DarkKnight&quot;, &quot;暗黑骑士&quot; },&#xD;&#xA;            { &quot;Gunbreaker&quot;, &quot;绝枪战士&quot; },&#xD;&#xA;            { &quot;Paladin&quot;, &quot;骑士&quot; },&#xD;&#xA;            { &quot;Warrior&quot;, &quot;战士&quot; },&#xD;&#xA;            { &quot;WhiteMage&quot;, &quot;白魔法师&quot; },&#xD;&#xA;            { &quot;Scholar&quot;, &quot;学者&quot; },&#xD;&#xA;            { &quot;Astrologian&quot;, &quot;占星术师&quot; },&#xD;&#xA;            { &quot;Sage&quot;, &quot;贤者&quot; },&#xD;&#xA;            { &quot;BlackMage&quot;, &quot;黑魔法师&quot; },&#xD;&#xA;            { &quot;Summoner&quot;, &quot;召唤师&quot; },&#xD;&#xA;            { &quot;RedMage&quot;, &quot;赤魔法师&quot; },&#xD;&#xA;            { &quot;Bard&quot;, &quot;吟游诗人&quot; },&#xD;&#xA;            { &quot;Dancer&quot;, &quot;舞者&quot; },&#xD;&#xA;            { &quot;Machinist&quot;, &quot;机工士&quot; },&#xD;&#xA;            { &quot;Dragoon&quot;, &quot;龙骑士&quot; },&#xD;&#xA;            { &quot;Monk&quot;, &quot;武僧&quot; },&#xD;&#xA;            { &quot;Ninja&quot;, &quot;忍者&quot; },&#xD;&#xA;            { &quot;Reaper&quot;, &quot;钐镰客&quot; },&#xD;&#xA;            { &quot;Samurai&quot;, &quot;武士&quot; },&#xD;&#xA;            { &quot;BlueMage&quot;, &quot;青魔法师&quot; },&#xD;&#xA;            { &quot;Pictomancer&quot;, &quot;绘灵法师&quot; },&#xD;&#xA;            { &quot;Viper&quot;, &quot;蝰蛇剑士&quot; }&#xD;&#xA;            // ...如有其它职业请补全...&#xD;&#xA;        };&#xD;&#xA;&#xD;&#xA;    // clientId和clientSecret通过GetScalarVariable获取&#xD;&#xA;    private static string GetClientId()&#xD;&#xA;    {&#xD;&#xA;        var v = Interpreter.StaticHelpers.GetScalarVariable(false, &quot;FFLOGS_CLIENT_ID&quot;);&#xD;&#xA;        if (string.IsNullOrEmpty(v))&#xD;&#xA;        {&#xD;&#xA;            RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, $&quot;/e 未设置FFLOGS_CLIENT_ID变量 &quot;);&#xD;&#xA;            throw new Exception(&quot;未设置FFLOGS_CLIENT_ID变量&quot;);&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        return v;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    private static string GetClientSecret()&#xD;&#xA;    {&#xD;&#xA;        var v = Interpreter.StaticHelpers.GetScalarVariable(false, &quot;FFLOGS_CLIENT_SECRET&quot;);&#xD;&#xA;        if (string.IsNullOrEmpty(v))&#xD;&#xA;        {&#xD;&#xA;            RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, $&quot;/e 未设置FFLOGS_CLIENT_SECRET变量 &quot;);&#xD;&#xA;            throw new Exception(&quot;未设置FFLOGS_CLIENT_SECRET变量&quot;);&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;        return v;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    private static string accessToken = null;&#xD;&#xA;    private static DateTime tokenExpire = DateTime.MinValue;&#xD;&#xA;    private static readonly HttpClient _client = new HttpClient();&#xD;&#xA;&#xD;&#xA;    // 获取access_token（健壮性加强）&#xD;&#xA;    public static async Task&lt;string&gt; GetAccessTokenAsync()&#xD;&#xA;    {&#xD;&#xA;        if (accessToken != null &amp;&amp; DateTime.Now &lt; tokenExpire)&#xD;&#xA;            return accessToken;&#xD;&#xA;&#xD;&#xA;        var request = new HttpRequestMessage(HttpMethod.Post, &quot;https://www.fflogs.com/oauth/token&quot;)&#xD;&#xA;        {&#xD;&#xA;            Content = new FormUrlEncodedContent(new Dictionary&lt;string, string&gt;&#xD;&#xA;            {&#xD;&#xA;                [&quot;grant_type&quot;] = &quot;client_credentials&quot;&#xD;&#xA;            })&#xD;&#xA;        };&#xD;&#xA;        string clientId = GetClientId();&#xD;&#xA;        string clientSecret = GetClientSecret();&#xD;&#xA;        string basic = Convert.ToBase64String(Encoding.ASCII.GetBytes($&quot;{clientId}:{clientSecret}&quot;));&#xD;&#xA;        request.Headers.Authorization = new AuthenticationHeaderValue(&quot;Basic&quot;, basic);&#xD;&#xA;&#xD;&#xA;        try&#xD;&#xA;        {&#xD;&#xA;            var response = await _client.SendAsync(request);&#xD;&#xA;            var responseContent = await response.Content.ReadAsStringAsync();&#xD;&#xA;            //RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, $&quot;/e Token状态码: {response.StatusCode}&quot;);&#xD;&#xA;            try&#xD;&#xA;            {&#xD;&#xA;                // if (!string.IsNullOrEmpty(responseContent))&#xD;&#xA;                //RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e TokenResp: &quot; + (responseContent.Length &gt; 400 ? responseContent.Substring(0, 400) : responseContent));&#xD;&#xA;                // 隐藏所有原始json、状态码等调试输出&#xD;&#xA;                //else&#xD;&#xA;                //RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e TokenResp为空&quot;);&#xD;&#xA;                // 隐藏所有原始json、状态码等调试输出&#xD;&#xA;            }&#xD;&#xA;            catch (Exception ex)&#xD;&#xA;            {&#xD;&#xA;                //RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e [TokenResp输出异常] &quot; + ex.Message);&#xD;&#xA;                // 隐藏所有原始json、状态码等调试输出&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            response.EnsureSuccessStatusCode();&#xD;&#xA;            // 解析access_token&#xD;&#xA;            int tokenStart = responseContent.IndexOf(&quot;\&quot;access_token\&quot;:\&quot;&quot;);&#xD;&#xA;            if (tokenStart == -1)&#xD;&#xA;            {&#xD;&#xA;                RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e [Token解析失败] 未找到access_token字段&quot;);&#xD;&#xA;                throw new Exception(&quot;未找到access_token字段&quot;);&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            tokenStart += 16;&#xD;&#xA;            int tokenEnd = responseContent.IndexOf(&quot;\&quot;&quot;, tokenStart);&#xD;&#xA;            if (tokenEnd == -1)&#xD;&#xA;            {&#xD;&#xA;                RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e [Token解析失败] 未找到access_token结束引号&quot;);&#xD;&#xA;                throw new Exception(&quot;未找到access_token结束引号&quot;);&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            accessToken = responseContent.Substring(tokenStart, tokenEnd - tokenStart);&#xD;&#xA;            // 解析expires_in&#xD;&#xA;            int expiresIn = 0; // 外部声明&#xD;&#xA;            int idx = responseContent.IndexOf(&quot;\&quot;expires_in\&quot;&quot;);&#xD;&#xA;            if (idx &gt;= 0)&#xD;&#xA;            {&#xD;&#xA;                int start = responseContent.IndexOf(&quot;:&quot;, idx);&#xD;&#xA;                if (start &gt;= 0)&#xD;&#xA;                {&#xD;&#xA;                    start++; // 跳过冒号&#xD;&#xA;                    // 跳过空格和引号&#xD;&#xA;                    while (start &lt; responseContent.Length &amp;&amp;&#xD;&#xA;                           (responseContent[start] == ' ' || responseContent[start] == '\&quot;')) start++;&#xD;&#xA;                    int end = responseContent.IndexOfAny(new char[] { ',', '}', '\n', '\r' }, start);&#xD;&#xA;                    if (end == -1) end = responseContent.Length;&#xD;&#xA;                    string value = responseContent.Substring(start, end - start).Trim();&#xD;&#xA;                    if (!int.TryParse(value, out expiresIn))&#xD;&#xA;                    {&#xD;&#xA;                        RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, $&quot;/e [Token解析失败] expires_in不是数字: {value}&quot;);&#xD;&#xA;                        throw new Exception(&quot;expires_in不是数字&quot;);&#xD;&#xA;                    }&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;            else&#xD;&#xA;            {&#xD;&#xA;                RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e [Token解析失败] 未找到expires_in字段&quot;);&#xD;&#xA;                throw new Exception(&quot;未找到expires_in字段&quot;);&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            tokenExpire = DateTime.Now.AddSeconds(expiresIn - 60);&#xD;&#xA;            return accessToken;&#xD;&#xA;        }&#xD;&#xA;        catch (Exception ex)&#xD;&#xA;        {&#xD;&#xA;            // RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, $&quot;/e Token异常: {ex.Message}&quot;);&#xD;&#xA;            throw;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    // 查询dps（region固定为CN，健壮性加强）&#xD;&#xA;    public static async Task&lt;string&gt; QueryDpsAsync(string name, string server, int encounterId, string specName,&#xD;&#xA;        string metric)&#xD;&#xA;    {&#xD;&#xA;        string region = &quot;CN&quot;;&#xD;&#xA;        string token = await GetAccessTokenAsync();&#xD;&#xA;        // 不再自动识别encounterId，未传入则直接返回空&#xD;&#xA;        if (encounterId == 0)&#xD;&#xA;        {&#xD;&#xA;            return &quot;&quot;;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        // specName映射转换，始终在最终传递前做&#xD;&#xA;        if (!string.IsNullOrWhiteSpace(specName) &amp;&amp; SpecNameMap.TryGetValue(specName.Trim(), out var mapped))&#xD;&#xA;            specName = mapped;&#xD;&#xA;        var query =&#xD;&#xA;            @&quot;query($name: String!, $server: String!, $serverRegion: String!, $encounterID: Int!, $metric: CharacterRankingMetricType!, $specName: String) { characterData { character(name: $name, serverSlug: $server, serverRegion: $serverRegion) { encounterRankings(encounterID: $encounterID, metric: $metric, specName: $specName) } } }&quot;;&#xD;&#xA;        string jsonPayload =&#xD;&#xA;            $&quot;{{\&quot;query\&quot;:\&quot;{query.Replace(&quot;\&quot;&quot;, &quot;\\\&quot;&quot;)}\&quot;,\&quot;variables\&quot;:{{\&quot;name\&quot;:\&quot;{name}\&quot;,\&quot;server\&quot;:\&quot;{server}\&quot;,\&quot;serverRegion\&quot;:\&quot;{region}\&quot;,\&quot;encounterID\&quot;:{encounterId},\&quot;metric\&quot;:\&quot;{metric}\&quot;,\&quot;specName\&quot;:\&quot;{specName}\&quot;}}}}&quot;;&#xD;&#xA;        var request = new HttpRequestMessage(HttpMethod.Post, &quot;https://www.fflogs.com/api/v2/client&quot;)&#xD;&#xA;        {&#xD;&#xA;            Content = new StringContent(jsonPayload, Encoding.UTF8, &quot;application/json&quot;)&#xD;&#xA;        };&#xD;&#xA;        request.Headers.Authorization = new AuthenticationHeaderValue(&quot;Bearer&quot;, token);&#xD;&#xA;        request.Headers.Add(&quot;Accept&quot;, &quot;application/json&quot;);&#xD;&#xA;        var response = await _client.SendAsync(request);&#xD;&#xA;        var json = await response.Content.ReadAsStringAsync();&#xD;&#xA;        // 隐藏所有原始json、状态码等调试输出&#xD;&#xA;        if (json.Contains(&quot;\&quot;encounterRankings\&quot;:null&quot;))&#xD;&#xA;            return $&quot;{name}({specName}): 未查询到数据&quot;;&#xD;&#xA;        double best = 0;&#xD;&#xA;        int kills = 0;&#xD;&#xA;        double pct = 0;&#xD;&#xA;        int bestStart = json.IndexOf(&quot;\&quot;bestAmount\&quot;:&quot;);&#xD;&#xA;        if (bestStart != -1)&#xD;&#xA;        {&#xD;&#xA;            bestStart += 13;&#xD;&#xA;            int bestEnd = json.IndexOf(&quot;,&quot;, bestStart);&#xD;&#xA;            if (bestEnd == -1) bestEnd = json.IndexOf(&quot;}&quot;, bestStart);&#xD;&#xA;            string bestStr = json.Substring(bestStart, bestEnd - bestStart).Trim();&#xD;&#xA;            if (!double.TryParse(bestStr, out best))&#xD;&#xA;                ; // 不再输出调试信息&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        int killsStart = json.IndexOf(&quot;\&quot;totalKills\&quot;:&quot;);&#xD;&#xA;        if (killsStart != -1)&#xD;&#xA;        {&#xD;&#xA;            killsStart += 12;&#xD;&#xA;            // 跳过冒号和空格&#xD;&#xA;            while (killsStart &lt; json.Length &amp;&amp; (json[killsStart] == ':' || json[killsStart] == ' ')) killsStart++;&#xD;&#xA;            int killsEnd = json.IndexOf(&quot;,&quot;, killsStart);&#xD;&#xA;            if (killsEnd == -1) killsEnd = json.IndexOf(&quot;}&quot;, killsStart);&#xD;&#xA;            string killsStr = json.Substring(killsStart, killsEnd - killsStart).Trim();&#xD;&#xA;            if (!int.TryParse(killsStr, out kills))&#xD;&#xA;                ; // 不再输出调试信息&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        int pctStart = json.IndexOf(&quot;\&quot;rankPercent\&quot;:&quot;);&#xD;&#xA;        if (pctStart != -1)&#xD;&#xA;        {&#xD;&#xA;            pctStart += 14;&#xD;&#xA;            int pctEnd = json.IndexOf(&quot;,&quot;, pctStart);&#xD;&#xA;            if (pctEnd == -1) pctEnd = json.IndexOf(&quot;}&quot;, pctStart);&#xD;&#xA;            string pctStr = json.Substring(pctStart, pctEnd - pctStart).Trim();&#xD;&#xA;            if (!double.TryParse(pctStr, out pct))&#xD;&#xA;                ; // 不再输出调试信息&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        // 染色逻辑&#xD;&#xA;        string color = &quot;灰&quot;;&#xD;&#xA;        double rtn = pct;&#xD;&#xA;        if (rtn &gt;= 99.9)&#xD;&#xA;            color = &quot;金&quot;;&#xD;&#xA;        else if (rtn &gt;= 99 &amp;&amp; rtn &lt; 99.9)&#xD;&#xA;            color = &quot;粉&quot;;&#xD;&#xA;        else if (rtn &gt;= 95 &amp;&amp; rtn &lt; 99)&#xD;&#xA;            color = &quot;橙&quot;;&#xD;&#xA;        else if (rtn &gt;= 75 &amp;&amp; rtn &lt; 95)&#xD;&#xA;            color = &quot;紫&quot;;&#xD;&#xA;        else if (rtn &gt;= 50 &amp;&amp; rtn &lt; 75)&#xD;&#xA;            color = &quot;蓝&quot;;&#xD;&#xA;        else if (rtn &gt;= 25 &amp;&amp; rtn &lt; 50)&#xD;&#xA;            color = &quot;绿&quot;;&#xD;&#xA;        // 中文职业名&#xD;&#xA;        string specNameZh = specName;&#xD;&#xA;        if (!string.IsNullOrWhiteSpace(specName) &amp;&amp; SpecNameEnToZh.TryGetValue(specName, out var zh1))&#xD;&#xA;            specNameZh = zh1;&#xD;&#xA;        // encounterId中文全称&#xD;&#xA;        string encounterNameZh = encounterId.ToString();&#xD;&#xA;        foreach (var kv in EncounterNameToId)&#xD;&#xA;        {&#xD;&#xA;            if (kv.Value == encounterId &amp;&amp; kv.Key.Any(c =&gt; c &gt; 127) &amp;&amp; !kv.Key.Any(c =&gt; c &lt; 128)) // 只取第一个全中文名&#xD;&#xA;            {&#xD;&#xA;                encounterNameZh = kv.Key;&#xD;&#xA;                break;&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        // fallback: 如果没找到中文名，尝试用英文名&#xD;&#xA;        if (encounterNameZh == encounterId.ToString())&#xD;&#xA;        {&#xD;&#xA;            foreach (var kv in EncounterNameToId)&#xD;&#xA;            {&#xD;&#xA;                if (kv.Value == encounterId)&#xD;&#xA;                {&#xD;&#xA;                    encounterNameZh = kv.Key;&#xD;&#xA;                    break;&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        if (kills == 0)&#xD;&#xA;        {&#xD;&#xA;            specNameZh = specName;&#xD;&#xA;            if (!string.IsNullOrWhiteSpace(specName) &amp;&amp; SpecNameEnToZh.TryGetValue(specName, out var zh2))&#xD;&#xA;                specNameZh = zh2;&#xD;&#xA;            // encounterId中文全称&#xD;&#xA;            encounterNameZh = encounterId.ToString();&#xD;&#xA;            foreach (var kv in EncounterNameToId)&#xD;&#xA;            {&#xD;&#xA;                if (kv.Value == encounterId &amp;&amp; kv.Key.Any(c =&gt; c &gt; 127) &amp;&amp; !kv.Key.Any(c =&gt; c &lt; 128)) // 只取第一个全中文名&#xD;&#xA;                {&#xD;&#xA;                    encounterNameZh = kv.Key;&#xD;&#xA;                    break;&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;            // fallback: 如果没找到中文名，尝试用英文名&#xD;&#xA;            if (encounterNameZh == encounterId.ToString())&#xD;&#xA;            {&#xD;&#xA;                foreach (var kv in EncounterNameToId)&#xD;&#xA;                {&#xD;&#xA;                    if (kv.Value == encounterId)&#xD;&#xA;                    {&#xD;&#xA;                        encounterNameZh = kv.Key;&#xD;&#xA;                        break;&#xD;&#xA;                    }&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;            return $&quot;{name}({specNameZh}): {encounterNameZh} 未过本&quot;;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        return&#xD;&#xA;            $&quot;{name}({specNameZh}): {encounterNameZh} 最高{metric}:{(int)Math.Round(best)}，通关数:{kills}，排名百分比:{rtn:F1}%({color})&quot;;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    // 新增：返回原始json&#xD;&#xA;    public static async Task&lt;string&gt; QueryDpsRawAsync(string name, string server, int encounterId, string specName,&#xD;&#xA;        string metric)&#xD;&#xA;    {&#xD;&#xA;        string region = &quot;CN&quot;;&#xD;&#xA;        string token = await GetAccessTokenAsync();&#xD;&#xA;        var query =&#xD;&#xA;            @&quot;query($name: String!, $server: String!, $serverRegion: String!, $encounterID: Int!, $metric: CharacterRankingMetricType!, $specName: String) { characterData { character(name: $name, serverSlug: $server, serverRegion: $serverRegion) { encounterRankings(encounterID: $encounterID, metric: $metric, specName: $specName) } } }&quot;;&#xD;&#xA;        string jsonPayload =&#xD;&#xA;            $&quot;{{\&quot;query\&quot;:\&quot;{query.Replace(&quot;\&quot;&quot;, &quot;\\\&quot;&quot;)}\&quot;,\&quot;variables\&quot;:{{\&quot;name\&quot;:\&quot;{name}\&quot;,\&quot;server\&quot;:\&quot;{server}\&quot;,\&quot;serverRegion\&quot;:\&quot;{region}\&quot;,\&quot;encounterID\&quot;:{encounterId},\&quot;metric\&quot;:\&quot;{metric}\&quot;,\&quot;specName\&quot;:\&quot;{specName}\&quot;}}}}&quot;;&#xD;&#xA;        var request = new HttpRequestMessage(HttpMethod.Post, &quot;https://www.fflogs.com/api/v2/client&quot;)&#xD;&#xA;        {&#xD;&#xA;            Content = new StringContent(jsonPayload, Encoding.UTF8, &quot;application/json&quot;)&#xD;&#xA;        };&#xD;&#xA;        request.Headers.Authorization = new AuthenticationHeaderValue(&quot;Bearer&quot;, token);&#xD;&#xA;        request.Headers.Add(&quot;Accept&quot;, &quot;application/json&quot;);&#xD;&#xA;        var response = await _client.SendAsync(request);&#xD;&#xA;        var json = await response.Content.ReadAsStringAsync();&#xD;&#xA;        return json;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    // 新增：副本名转ID映射&#xD;&#xA;    public static readonly Dictionary&lt;string, int&gt; EncounterNameToId =&#xD;&#xA;        new Dictionary&lt;string, int&gt;(StringComparer.OrdinalIgnoreCase)&#xD;&#xA;        {&#xD;&#xA;            { &quot;UCoB&quot;, 1060 }, { &quot;绝巴哈&quot;, 1060 }, { &quot;巴哈&quot;, 1060 }, { &quot;巴哈姆特绝境战&quot;, 1060 }, { &quot;巴&quot;, 1060 }, { &quot;巴哈姆特&quot;, 1060 },&#xD;&#xA;            { &quot;UwU&quot;, 1061 }, { &quot;绝神兵&quot;, 1061 }, { &quot;神兵&quot;, 1061 }, { &quot;究极神兵绝境战&quot;, 1061 }, { &quot;兵&quot;, 1061 }, { &quot;究极神兵&quot;, 1061 },&#xD;&#xA;            { &quot;TEA&quot;, 1062 }, { &quot;绝亚&quot;, 1062 }, { &quot;亚历山大绝境战&quot;, 1062 }, { &quot;绝亚历山大&quot;, 1062 }, { &quot;亚&quot;, 1062 }, { &quot;亚历山大&quot;, 1062 },&#xD;&#xA;            { &quot;DSR&quot;, 1065 }, { &quot;龙诗&quot;, 1065 }, { &quot;幻想龙诗绝境战&quot;, 1065 }, { &quot;绝龙诗&quot;, 1065 }, { &quot;龙&quot;, 1065 }, { &quot;幻想龙诗&quot;, 1065 },&#xD;&#xA;            { &quot;TOP&quot;, 1068 }, { &quot;绝欧&quot;, 1068 }, { &quot;欧米茄绝境验证战&quot;, 1068 }, { &quot;绝欧米茄&quot;, 1068 }, { &quot;欧&quot;, 1068 }, { &quot;绝O&quot;, 1068 },&#xD;&#xA;            { &quot;欧米茄&quot;, 1068 },&#xD;&#xA;            { &quot;FRU&quot;, 1079 }, { &quot;绝伊甸&quot;, 1079 }, { &quot;光暗未来绝境战&quot;, 1079 }, { &quot;绝ed&quot;, 1079 }, { &quot;伊甸&quot;, 1079 }, { &quot;光暗未来&quot;, 1079 },&#xD;&#xA;            { &quot;M5S&quot;, 97 }, { &quot;阿卡狄亚登天斗技场 中量级1&quot;, 97 }, { &quot;Dancing Green&quot;, 97 }, { &quot;热舞绿光&quot;, 97 },&#xD;&#xA;            { &quot;M6S&quot;, 98 }, { &quot;阿卡狄亚登天斗技场 中量级2&quot;, 98 }, { &quot;Sugar Riot&quot;, 98 }, { &quot;狂热糖潮&quot;, 98 },&#xD;&#xA;            { &quot;M7S&quot;, 99 }, { &quot;阿卡狄亚登天斗技场 中量级3&quot;, 99 }, { &quot;Brute Abombinator&quot;, 99 }, { &quot;野蛮恨心&quot;, 99 },&#xD;&#xA;            { &quot;M8S&quot;, 100 }, { &quot;阿卡狄亚登天斗技场 中量级4&quot;, 100 }, { &quot;Howling Blade&quot;, 100 }, { &quot;剑嚎&quot;, 100 },&#xD;&#xA;            { &quot;极泽莲尼娅&quot;, 1080 }, { &quot;Zelenia&quot;, 1080 },&#xD;&#xA;            { &quot;Cloud of Darkness&quot;, 2061 }, { &quot;黑暗之云&quot;, 2061 },&#xD;&#xA;            { &quot;Black Cat&quot;, 93 }, { &quot;Honey B. Lovely&quot;, 94 }, { &quot;Brute Bomber&quot;, 95 }, { &quot;Wicked Thunder&quot;, 96 },&#xD;&#xA;            { &quot;M1S&quot;, 93 }, { &quot;阿卡狄亚登天斗技场 轻量级1&quot;, 93 }, { &quot;黑猫&quot;, 93 },&#xD;&#xA;            { &quot;M2S&quot;, 94 }, { &quot;阿卡狄亚登天斗技场 轻量级2&quot;, 94 }, { &quot;蜂蜂小甜心&quot;, 94 },&#xD;&#xA;            { &quot;M3S&quot;, 95 }, { &quot;阿卡狄亚登天斗技场 轻量级3&quot;, 95 }, { &quot;野蛮爆弹狂人&quot;, 95 },&#xD;&#xA;            { &quot;M4S&quot;, 96 }, { &quot;阿卡狄亚登天斗技场 轻量级4&quot;, 96 }, { &quot;狡雷&quot;, 96 },&#xD;&#xA;            { &quot;M9S&quot;, 101 }, { &quot;阿卡狄亚登天斗技场 重量级5&quot;, 101 },&#xD;&#xA;            { &quot;M10S&quot;, 102 }, { &quot;阿卡狄亚登天斗技场 重量级6&quot;, 102 },&#xD;&#xA;            { &quot;M11S&quot;, 103 }, { &quot;阿卡狄亚登天斗技场 重量级7&quot;, 103 },&#xD;&#xA;            { &quot;M12S&quot;, 104 }, { &quot;阿卡狄亚登天斗技场 重量级8&quot;, 104 },&#xD;&#xA;            { &quot;1122&quot;, 1068 }, // 欧米茄绝境验证战_时空狭缝 → 绝欧&#xD;&#xA;            { &quot;968&quot;, 1065 },  // 幻想龙诗绝境战_诗想空间 → 绝龙诗&#xD;&#xA;            { &quot;887&quot;, 1062 },  // 亚历山大绝境战_差分闭合宇宙 → 绝亚&#xD;&#xA;            { &quot;777&quot;, 1061 },  // 究极神兵绝境战_禁绝幻想 → 绝神兵&#xD;&#xA;            { &quot;733&quot;, 1060 },  // 巴哈姆特绝境战_巴哈姆特大迷宫 → 绝巴哈&#xD;&#xA;            // ...如有其它副本英文名请继续补全...&#xD;&#xA;        };&#xD;&#xA;&#xD;&#xA;    // 新增：副本名/简称/encounterId/数字 → 地图id 映射表（不可与 EncounterNameToId 混用！）&#xD;&#xA;    public static readonly Dictionary&lt;string, int&gt; EncounterToMapId = new Dictionary&lt;string, int&gt;(StringComparer.OrdinalIgnoreCase)&#xD;&#xA;    {&#xD;&#xA;        { &quot;阿卡狄亚零式登天斗技场 中量级1&quot;, 1257 },&#xD;&#xA;        { &quot;M5S&quot;, 1257 },&#xD;&#xA;        { &quot;阿卡狄亚零式登天斗技场 中量级2&quot;, 1259 },&#xD;&#xA;        { &quot;M6S&quot;, 1259 }, &#xD;&#xA;        { &quot;阿卡狄亚零式登天斗技场 中量级3&quot;, 1261 },&#xD;&#xA;        { &quot;M7S&quot;, 1261 },&#xD;&#xA;        { &quot;阿卡狄亚零式登天斗技场 中量级4&quot;, 1263 },&#xD;&#xA;        { &quot;M8S&quot;, 1263 },&#xD;&#xA;        { &quot;泽莲尼娅歼殛战&quot;, 1271 },&#xD;&#xA;        { &quot;泽莲尼娅&quot;, 1271 },&#xD;&#xA;        { &quot;极泽莲尼娅&quot;, 1271 },&#xD;&#xA;        { &quot;Zelenia&quot;, 1271 },&#xD;&#xA;        { &quot;极泽&quot;, 1271 },&#xD;&#xA;    };&#xD;&#xA;&#xD;&#xA;    /// &lt;summary&gt;&#xD;&#xA;    /// 查询 sumemo.dev 最优记录最远进度，需二次请求 zone 接口获取 phase/subphase 名称（Newtonsoft.Json 版本）&#xD;&#xA;    /// &lt;/summary&gt;&#xD;&#xA;    /// &lt;param name=&quot;name&quot;&gt;角色名&lt;/param&gt;&#xD;&#xA;    /// &lt;param name=&quot;server&quot;&gt;服务器名&lt;/param&gt;&#xD;&#xA;    /// &lt;param name=&quot;encounterInput&quot;&gt;副本ID/简称/中文名/数字&lt;/param&gt;&#xD;&#xA;    /// &lt;returns&gt;如：最优记录最远进度：前半 光狼&lt;/returns&gt;&#xD;&#xA;    public static async Task&lt;string&gt; QuerySumemoProgressAsync(string name, string server, object encounterInput)&#xD;&#xA;    {&#xD;&#xA;        // 1. 输入转字符串&#xD;&#xA;        string input = encounterInput?.ToString()?.Trim() ?? &quot;&quot;;&#xD;&#xA;        if (string.IsNullOrWhiteSpace(input))&#xD;&#xA;            return $&quot;未指定副本&quot;;&#xD;&#xA;&#xD;&#xA;        // 2. 尝试用 EncounterToMapId 映射为地图ID&#xD;&#xA;        int mapId = 0;&#xD;&#xA;        if (EncounterToMapId.TryGetValue(input, out var foundMapId))&#xD;&#xA;        {&#xD;&#xA;            mapId = foundMapId;&#xD;&#xA;        }&#xD;&#xA;        else if (int.TryParse(input, out var id))&#xD;&#xA;        {&#xD;&#xA;            // 允许直接输入地图ID&#xD;&#xA;            mapId = id;&#xD;&#xA;        }&#xD;&#xA;        else&#xD;&#xA;        {&#xD;&#xA;            return $&quot;未找到副本 {input} 对应的地图ID&quot;;&#xD;&#xA;        }&#xD;&#xA;        if (mapId == 0)&#xD;&#xA;            return $&quot;未找到副本 {input} 对应的地图ID&quot;;&#xD;&#xA;&#xD;&#xA;        // 3. 第一次请求 sumemo.dev API，获取 progress&#xD;&#xA;        string urlBest = $&quot;https://api.sumemo.dev/member/{Uri.EscapeDataString(name)}@{Uri.EscapeDataString(server)}/{mapId}/best&quot;;&#xD;&#xA;        using (var client = new HttpClient())&#xD;&#xA;        {&#xD;&#xA;            client.DefaultRequestHeaders.UserAgent.ParseAdd(&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64)&quot;);&#xD;&#xA;            string jsonBest = await client.GetStringAsync(urlBest);&#xD;&#xA;            if (string.IsNullOrWhiteSpace(jsonBest))&#xD;&#xA;                return $&quot;{name}@{server} 未查到数据&quot;;&#xD;&#xA;&#xD;&#xA;            var objBest = Newtonsoft.Json.Linq.JObject.Parse(jsonBest);&#xD;&#xA;            // 判断 clear 字段&#xD;&#xA;            var clearElem = objBest[&quot;clear&quot;];&#xD;&#xA;            if (clearElem != null &amp;&amp; clearElem.Type != Newtonsoft.Json.Linq.JTokenType.Null &amp;&amp; (bool)clearElem)&#xD;&#xA;            {&#xD;&#xA;                return $&quot;{name}@{server} {input} 已过本&quot;;&#xD;&#xA;            }&#xD;&#xA;            var progressElem = objBest[&quot;progress&quot;];&#xD;&#xA;            if (progressElem == null)&#xD;&#xA;                return $&quot;{name}@{server} 未查到记录&quot;;&#xD;&#xA;            int phaseId = (int)progressElem[&quot;phase&quot;];&#xD;&#xA;            int subphaseId = (int)progressElem[&quot;subphase&quot;];&#xD;&#xA;            // 判断 fight_id 是否存在，无记录时直接返回&#xD;&#xA;            var fightIdElem = objBest[&quot;fight_id&quot;];&#xD;&#xA;            if ((fightIdElem == null || fightIdElem.Type == Newtonsoft.Json.Linq.JTokenType.Null)&#xD;&#xA;                &amp;&amp; phaseId == 0 &amp;&amp; subphaseId == 0)&#xD;&#xA;            {&#xD;&#xA;                return $&quot;{name}@{server} {input} 未查到记录&quot;;&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            // 4. 第二次请求 zone 接口，获取 phase/subphase 名称&#xD;&#xA;            string urlZone = $&quot;https://api.sumemo.dev/zone/{mapId}&quot;;&#xD;&#xA;            string jsonZone = await client.GetStringAsync(urlZone);&#xD;&#xA;            if (string.IsNullOrWhiteSpace(jsonZone))&#xD;&#xA;                return $&quot;{name}@{server} 未查到副本结构&quot;;&#xD;&#xA;            var objZone = Newtonsoft.Json.Linq.JObject.Parse(jsonZone);&#xD;&#xA;            var phasesElem = objZone[&quot;phases&quot;] as Newtonsoft.Json.Linq.JArray;&#xD;&#xA;            if (phasesElem == null)&#xD;&#xA;                return $&quot;{name}@{server} 未查到副本阶段结构&quot;;&#xD;&#xA;&#xD;&#xA;            string phaseName = null, subphaseName = null, phaseDesc = null, subphaseDesc = null;&#xD;&#xA;            foreach (var phase in phasesElem)&#xD;&#xA;            {&#xD;&#xA;                if ((int)phase[&quot;phase_id&quot;] == phaseId)&#xD;&#xA;                {&#xD;&#xA;                    phaseName = (string)phase[&quot;name&quot;];&#xD;&#xA;                    phaseDesc = (string)phase[&quot;description&quot;];&#xD;&#xA;                    var subphases = phase[&quot;subphases&quot;] as Newtonsoft.Json.Linq.JArray;&#xD;&#xA;                    if (subphases != null)&#xD;&#xA;                    {&#xD;&#xA;                        foreach (var subphase in subphases)&#xD;&#xA;                        {&#xD;&#xA;                            if ((int)subphase[&quot;subphase_id&quot;] == subphaseId)&#xD;&#xA;                            {&#xD;&#xA;                                subphaseName = (string)subphase[&quot;name&quot;];&#xD;&#xA;                                subphaseDesc = (string)subphase[&quot;description&quot;];&#xD;&#xA;                                break;&#xD;&#xA;                            }&#xD;&#xA;                        }&#xD;&#xA;                    }&#xD;&#xA;                    break;&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;            // 5. 输出格式&#xD;&#xA;            string desc = &quot;&quot;;&#xD;&#xA;            if (!string.IsNullOrWhiteSpace(subphaseDesc) &amp;&amp; !string.IsNullOrWhiteSpace(phaseDesc))&#xD;&#xA;            {&#xD;&#xA;                desc = $&quot;（{subphaseDesc}，{phaseDesc}）&quot;;&#xD;&#xA;            }&#xD;&#xA;            else if (!string.IsNullOrWhiteSpace(subphaseDesc))&#xD;&#xA;            {&#xD;&#xA;                desc = $&quot;（{subphaseDesc}）&quot;;&#xD;&#xA;            }&#xD;&#xA;            else if (!string.IsNullOrWhiteSpace(phaseDesc))&#xD;&#xA;            {&#xD;&#xA;                desc = $&quot;（{phaseDesc}）&quot;;&#xD;&#xA;            }&#xD;&#xA;            if (phaseName != null &amp;&amp; subphaseName != null)&#xD;&#xA;            {&#xD;&#xA;                return $&quot;{name}@{server} {input} 最远进度：{phaseName} {subphaseName}{desc}&quot;;&#xD;&#xA;            }&#xD;&#xA;            else if (phaseName != null)&#xD;&#xA;            {&#xD;&#xA;                return $&quot;{name}@{server} {input} 最远进度：{phaseName}{desc}&quot;;&#xD;&#xA;            }&#xD;&#xA;            else&#xD;&#xA;            {&#xD;&#xA;                return $&quot;{name}@{server} {input} 未查到记录&quot;;&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;};&#xD;&#xA;" ActionType="ExecuteScript" />
        </Actions>
      </Trigger>
      <Trigger Enabled="true" Name="进入指定高难本自动查询小队" Id="b377fa63-3a90-41dd-9d95-09ca62815056" RegularExpression="^.{15}\S+ 28:(?&lt;zoneid&gt;\d+)">
        <Actions>
          <Action OrderNumber="1" NamedCallbackName="Nag0mi_LogsPolice" NamedCallbackParam="Party rdps 绝巴哈" ActionType="NamedCallback">
            <Condition Enabled="true" Grouping="Or">
              <ConditionSingle Enabled="true" ExpressionL="${zoneid}" ExpressionTypeL="Numeric" ExpressionR="733" ExpressionTypeR="Numeric" ConditionType="NumericEqual" />
            </Condition>
          </Action>
          <Action OrderNumber="2" NamedCallbackName="Nag0mi_LogsPolice" NamedCallbackParam="Party rdps 绝神兵" ActionType="NamedCallback">
            <Condition Enabled="true" Grouping="Or">
              <ConditionSingle Enabled="true" ExpressionL="${zoneid}" ExpressionTypeL="Numeric" ExpressionR="777" ExpressionTypeR="Numeric" ConditionType="NumericEqual" />
            </Condition>
          </Action>
          <Action OrderNumber="3" NamedCallbackName="Nag0mi_LogsPolice" NamedCallbackParam="Party rdps 绝亚" ActionType="NamedCallback">
            <Condition Enabled="true" Grouping="Or">
              <ConditionSingle Enabled="true" ExpressionL="${zoneid}" ExpressionTypeL="Numeric" ExpressionR="887" ExpressionTypeR="Numeric" ConditionType="NumericEqual" />
            </Condition>
          </Action>
          <Action OrderNumber="4" NamedCallbackName="Nag0mi_LogsPolice" NamedCallbackParam="Party rdps 绝龙诗" ActionType="NamedCallback">
            <Condition Enabled="true" Grouping="Or">
              <ConditionSingle Enabled="true" ExpressionL="${zoneid}" ExpressionTypeL="Numeric" ExpressionR="968" ExpressionTypeR="Numeric" ConditionType="NumericEqual" />
            </Condition>
          </Action>
          <Action OrderNumber="5" NamedCallbackName="Nag0mi_LogsPolice" NamedCallbackParam="Party rdps 绝欧" ActionType="NamedCallback">
            <Condition Enabled="true" Grouping="Or">
              <ConditionSingle Enabled="true" ExpressionL="${zoneid}" ExpressionTypeL="Numeric" ExpressionR="1122" ExpressionTypeR="Numeric" ConditionType="NumericEqual" />
            </Condition>
          </Action>
          <Action OrderNumber="6" NamedCallbackName="Nag0mi_LogsPolice" NamedCallbackParam="Party rdps 绝伊甸" ActionType="NamedCallback">
            <Condition Enabled="true" Grouping="Or">
              <ConditionSingle Enabled="true" ExpressionL="${zoneid}" ExpressionTypeL="Numeric" ExpressionR="1238" ExpressionTypeR="Numeric" ConditionType="NumericEqual" />
            </Condition>
          </Action>
          <Action OrderNumber="7" NamedCallbackName="Nag0mi_LogsPolice" NamedCallbackParam="Party rdps M5S" ActionType="NamedCallback">
            <Condition Enabled="true" Grouping="Or">
              <ConditionSingle Enabled="true" ExpressionL="${zoneid}" ExpressionTypeL="Numeric" ExpressionR="1257" ExpressionTypeR="Numeric" ConditionType="NumericEqual" />
            </Condition>
          </Action>
          <Action OrderNumber="8" NamedCallbackName="Nag0mi_LogsPolice" NamedCallbackParam="Party rdps M6S" ActionType="NamedCallback">
            <Condition Enabled="true" Grouping="Or">
              <ConditionSingle Enabled="true" ExpressionL="${zoneid}" ExpressionTypeL="Numeric" ExpressionR="1259" ExpressionTypeR="Numeric" ConditionType="NumericEqual" />
            </Condition>
          </Action>
          <Action OrderNumber="9" NamedCallbackName="Nag0mi_LogsPolice" NamedCallbackParam="Party rdps M7S" ActionType="NamedCallback">
            <Condition Enabled="true" Grouping="Or">
              <ConditionSingle Enabled="true" ExpressionL="${zoneid}" ExpressionTypeL="Numeric" ExpressionR="1261" ExpressionTypeR="Numeric" ConditionType="NumericEqual" />
            </Condition>
          </Action>
          <Action OrderNumber="10" NamedCallbackName="Nag0mi_LogsPolice" NamedCallbackParam="Party rdps M8S" ActionType="NamedCallback">
            <Condition Enabled="true" Grouping="Or">
              <ConditionSingle Enabled="true" ExpressionL="${zoneid}" ExpressionTypeL="Numeric" ExpressionR="1263" ExpressionTypeR="Numeric" ConditionType="NumericEqual" />
            </Condition>
          </Action>
        </Actions>
      </Trigger>
    </Triggers>
  </ExportedFolder>
</TriggernometryExport>